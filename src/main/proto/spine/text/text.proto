/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.text;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_package = "io.spine.text";
option java_outer_classname = "TextProto";

import "google/protobuf/empty.proto";

// A multi-line text.
message Text {
    option (is).java_type = "TextMixin";
    string value = 1;
}

// Coordinates inside a text.
message Cursor {

    // A zero-based index of the line in the text.
    //
    // If add a whole line at this coordinate, the value of this field
    // means "add text _before_ this line".
    //
    int32 line = 1 [(min).value = "0"];

    // A zero-based position inside the [line].
    //
    // If we add text inside the line, the value of this field means
    // "add text _after_ this colum".
    //
    int32 column = 2 [(min).value = "0"];
}

// A pointer to a place in a text file.
message TextCoordinates {

    oneof kind {
        option (is_required) = true;

        // Points at specific line and column.
        Cursor inline = 1 [(validate) = true];

        // Points at the start of a specific line.
        uint32 whole_line = 2;

        // Points at the point after the last line of the text.
        //
        // In other terms, this point is the place where the text can be appended.
        //
        // The associated column number is always zero, since there can be no existing chars in
        // the line yet.
        //
        google.protobuf.Empty end_of_text = 3;

        // Specifies that there is no such place in a given file.
        google.protobuf.Empty nowhere = 4;
    }
}
